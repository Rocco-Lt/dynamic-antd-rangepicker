(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('antd'), require('moment')) :
	typeof define === 'function' && define.amd ? define(['react', 'antd', 'moment'], factory) :
	(global.DynamicAntdRangePicker = factory(global.React,global.antd,global.moment));
}(this, (function (React,antd,moment) { 'use strict';

React = React && React.hasOwnProperty('default') ? React['default'] : React;
moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RangePicker$1 = function (_React$Component) {
  _inherits(RangePicker, _React$Component);

  function RangePicker(props) {
    _classCallCheck(this, RangePicker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.disabledDate = function (now) {
      var _this$props = _this.props,
          maxDate = _this$props.maxDate,
          dateLimit = _this$props.dateLimit,
          dynamicDateLimit = _this$props.dynamicDateLimit;
      var selected = _this.state.selected;

      var beforeDay = null;
      var afterDay = null;
      if (dateLimit) {
        var unit = Object.keys(dateLimit)[0];
        beforeDay = moment(selected).subtract(dateLimit[unit], unit);
        if (selected && dynamicDateLimit) {
          if (!isNaN(dateLimit[unit])) {
            afterDay = moment(selected).add(dateLimit[unit], unit);
          }
          // 如果设定了最大时间 并且最大时间小于计算时间 最终范围设定为最大时间
          if (maxDate && moment(maxDate).isBefore(afterDay)) {
            afterDay = maxDate;
          }
          return now < beforeDay || now > afterDay.endOf('day');
        } else {
          return now < beforeDay || now > moment().endOf('day');
        }
      } else if (maxDate) {
        return now && now > maxDate.endOf('day');
      }
    };

    _this.onCalendarChange = function (now) {
      var _this$props2 = _this.props,
          dateLimit = _this$props2.dateLimit,
          dynamicDateLimit = _this$props2.dynamicDateLimit;

      if (dateLimit && dynamicDateLimit && now.length === 1) {
        _this.setState({
          selected: now[0]
        });
      }
    };

    _this.state = {
      selected: {}
    };
    return _this;
  }

  RangePicker.prototype.render = function render() {
    return React.createElement(antd.DatePicker.RangePicker, _extends({}, this.props, {
      disabledDate: this.disabledDate,
      onCalendarChange: this.onCalendarChange
    }));
  };

  return RangePicker;
}(React.Component);

return RangePicker$1;

})));
